from openai import OpenAI
import config

api_key = config.OPENAI_API_KEY
openai_model = config.OPENAI_MODEL
client = OpenAI(api_key=api_key)

n_days = config.DAYS_BACK


def _get_completion(prompt, model=openai_model):
    """
    Retrieves the completion message from the OpenAI chat model.

    :param prompt: The prompt provided by the user.
    :param model: The OpenAI model to use for completion (optional).
    :return: The completion message generated by the model.
    """
    messages = [{"role": "user", "content": prompt}]
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0
    )
    response_message = response.choices[0].message.content
    return response_message


def _summarize_diffs(text):
    """
    :param text: The git diffs to be summarized
    :return: A summarized report of the work accomplished with the provided git diffs

    This method takes a text string containing git diffs as input. It then generates a summarized report of the work that was done with these changes.

    The report starts with the phrase 'Over the past {n_days}, I worked on:', where {n_days} should be replaced with the appropriate number of days. After that, the report should provide
    * a detailed response describing the work accomplished.

    The method limits the response to a maximum of 1900 characters to ensure brevity. It delimits the git diffs section with triple backticks for better visibility.

    Example Usage:

        text = "[git diff]"
        summary = _summarize_diffs(text)
        print(summary)

    Expected Output:

        Over the past {n_days}, I worked on:

        [Response]

        Report on the diffs below, delimited by triple backticks.

        Please limit your response to 1900 characters.

        diff: ```[git diff]```
    """
    return f"""
    Your task is to understand the work that was done in the git diffs provided. 
    Then I want you to write a report of what work was accomplished with these changes. 
    Try to report on everything as a whole. 
    Start your response with: 'Over the past {n_days}, I worked on:', then a new line and the response. 
    
    Report on the diffs below, delimited by triple backticks.
    
    Please limit your response to 1900 characters.
    
    diff: ```{text}```
    """


def _summarize_messages(text):
    """
    :param text: the commit messages where the work done is reported, delimited by triple backticks
    :return: a summary of the work done as reported by the commit messages

    The commit message may include multiple GitLab issue numbers. Issue numbers always contain a hashtag and a number. For example `#42` is an issue number. They can also be part of an automatic
    * merge commit message which follows the format: `Merge branch '<branch name>'...`. If the branch name of the merge commit message starts with numbers, that is the issue number. For
    * example: Merge branch '986-...'. Here the issue number is #986. Sometimes the issue number is prefixed by a repository name, like "server#42". In this case, the issue number is server
    *#42.

    Start your response with: 'Over the past {n_days}, I worked on:', then a new line and the response.

    Please include the issue numbers at the end of your response by saying: "These are related to issues: <add issue numbers here>"

    Note, for each issue number, add a hashtag before the number and if the issue number.

    Please limit your response to 19000 characters.

    Example usage:
        text = '''
        commit message 1
        commit message 2
        ...
        '''
        summary = _summarize_messages(text)
        print(summary)

    commit messages: ```{text}```
    """
    return f"""
    Your task is to understand the work that was done as reported by the commit messages delimited by triple backticks.
    
    The commit message may include multiple GitLab issue numbers. Issue numbers always contain a hashtag and a number. 
    For example `#42` is an issue number. They can also be part of an automatic merge commit message which follows the
    format: `Merge branch '<branch name>'...`. If the branch name of the merge commit message starts with numbers,
    that is the issue number. For example: Merge branch '986-...'. Here the issue number is #986. Sometimes the issue
    number is prefixed by a repository name, like "server#42". In this case, the issue number is server#42. 
     
    Start your response with: 'Over the past {n_days}, I worked on:', then a new line and the response.

    Please include the issue numbers at the end of your response by saying: "These are related to issues: <add issue numbers here>"
    
    Note, for each issue number, add a hashtag before the number and if the issue number.
   
    Please limit your response to 19000 characters.
    commit messages: ```{text}```
    """


def summarize_diffs(text):
    """
    :param text: The input text to summarize the differences.
    :return: The summarized differences in the text.

    This method takes in a text and attempts to summarize the differences in the text using the OpenAI API. The method first calls the `_summarize_diffs` function with the given text to
    * create a prompt. Then, it calls the `_get_completion` function to generate a summary of the differences based on the prompt. Finally, it returns the generated summary.

    If any error occurs during the API call, an `Exception` is raised with the appropriate error message.

    Example usage:
    ```
    text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
    summary = summarize_diffs(text)
    print(summary)
    ```
    """
    try:
        prompt = _summarize_diffs(text)
        summary = _get_completion(prompt)
        return summary
    except Exception as e:
        raise Exception(f"OpenAI API Error: {e}")


def summarize_messages(text):
    """
    Summarize Messages

    This method takes a text as input and returns a summarized result obtained from the OpenAI API.

    :param text: The text to be summarized.
    :return: The summarized result obtained from the OpenAI API.
    :raises Exception: If there is an error with the OpenAI API.

    """
    try:
        prompt = _summarize_messages(text)
        summary = _get_completion(prompt)
        return summary
    except Exception as e:
        raise Exception(f"OpenAI API Error: {e}")
